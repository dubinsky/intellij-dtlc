//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.miniagda.MiniAgdaParser"

  psiClassPrefix="MiniAgda"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.miniagda"
  psiImplPackage="org.ice1000.tt.psi.miniagda.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.miniagda.MiniAgdaTypes"
  elementTypeClass="org.ice1000.tt.psi.miniagda.MiniAgdaElementType"
  tokenTypeClass="org.ice1000.tt.psi.miniagda.MiniAgdaTokenType"

  extends(".*Decl")=decl
  extends(".*Expr")=expr
  extends(".*Pat")=pat
  extends(".*PatE")=ePat
  extends(".*Bind")=bind
}

topLevel ::= declaration*

modifier ::=
   IMPREDICATIVE
 | CHECK
 | TRUSTME
 | FAIL

private declaration ::= modifier? decl
decl ::=
   dataDecl
 | recordDecl
 | funDecl
 | mutualDecl
 | letDecl
 | patternDecl
 | modifiedSetOfDecl

patternDecl ::= PATTERN
 nameDef nameDef*
 ASSIGN pairP {
	pin=1
}

mutualDecl ::= MUTUAL LBRACE declaration* RBRACE {
	pin=1
}
modifiedSetOfDecl ::= modifier LBRACE declaration* RBRACE {
	pin=2
}

nameDef ::= IDENTIFIER
nameExpr ::= IDENTIFIER {
}
typeSig ::= COLON expr { pin=1 }

dataKind ::= DATA | CODATA
dataDecl ::=
 SIZED? dataKind
 nameDef bind* typeSig?
 LBRACE constructors RBRACE
 optFields? {
	pin=2
}
recordDecl ::=
 RECORD
 nameDef bind* typeSig?
 LBRACE constructor RBRACE
 optFields? {
	pin=1
}

private constructors ::= (constructor SEMI)* constructor?
constructor ::= nameDef tele* typeSig?

private clauses ::= (clause SEMI)* clause?

private namesRest ::= COMMA nameDef { pin=1 }
names ::= nameDef namesRest*

optFields ::= FIELDS names { pin=1 }

funKind ::= FUN | COFUN
funDecl ::=
 funKind
 nameDef typeSig
 LBRACE clauses RBRACE {
	pin=1
}

private exprTRest ::= COMMA expr { pin=1 }
exprT ::= expr exprTRest+ | expr

private lhs ::= pats
private clauseRhs ::= ASSIGN exprT { pin=1 }
clause ::= nameDef lhs clauseRhs? {
	pin=1
}

pats ::= (elimPats | pat)*
elimPats ::= TRIANGLE_L ePat {
	pin=1
}

pat ::=
   tuplePat
 | dotNamePat
 | succPat
 | dotSetPat
 | atomicPat
private pairPatRest ::= COMMA ePat { pin=1 }
pairP ::= ePat pairPatRest*
tuplePat ::= LPAREN pairP? RPAREN { pin=1 }
dotNamePat ::= DOT? nameDef
succPat ::= SUCC nameDef { pin=1 }
dotSetPat ::= DOT SET
atomicPat ::= DOT atomic

ePat ::=
   conPatE
 | exprIdPatE
 | idExprPatE
 | pat

// constructor with at least one argument pattern
conPatE ::= dotNamePat pat+ [TRIANGLE_L ePat]
exprIdPatE ::= atomic GT nameDef { pin=2 }
idExprPatE ::= nameDef LT atomic { pin=2 }

letDecl ::= EVAL? LET polName tele* typeSig? ASSIGN exprT {
	pin=2
}

pol ::= PLUS_PLUS | PLUS | MINUS | DOT | EXPONENT | TIMES
measure ::= BAR exprT BAR
bound ::= measure less measure
less ::= LT | LT_EQ

tele ::= measure | bind

private bindRhs ::= typeSig | less expr
bind ::= aBind | eBind | hBind | dBind
aBind ::= pol? LPAREN names bindRhs RPAREN {
	pin=4
}
eBind ::= LBRACK names bindRhs RBRACK {
	pin=3
}
hBind ::= LBRACE names bindRhs RBRACE {
	pin=3
}
dBind ::= LPAREN PLUS names bindRhs RPAREN {
	pin=4
}

polName ::= pol? nameDef | LBRACK nameDef RBRACK
// uBind ::= pol? name | pol LPAREN name RPAREN | LBRACK name RBRACK

oneCase ::= pat [ARROW exprT]
private casesRest ::= SEMI oneCase { pin=1 }
cases ::= oneCase casesRest*

localLet ::=
   LBRACK nameDef typeSig RBRACK ASSIGN expr
 | pol LPAREN nameDef typeSig RPAREN ASSIGN expr

private exprDom ::= LBRACK expr RBRACK
domain ::=
 // In MiniAgda, this can be tele*, but I doubt it's used actually
   bound
 | tele+
 | exprDom
 | pol app

sigDom ::=
   bound
 | tele
 | exprDom
 | pol app

expr ::=
   piExpr
 | pi2Expr
 | lamExpr
 | letExpr
 | caseExpr
 | plusExpr
 | pipeExpr
 | app

private app ::=
   sigExpr
 | sig2Expr
 | appExpr
 | projExpr
 | setExpr
 | numberExpr
 | cosetExpr
 | atomic

piExpr ::= domain ARROW expr
pi2Expr ::= expr ARROW expr
sig2Expr ::= expr AND expr
lamExpr ::= BACKSLASH nameDef+ ARROW exprT {
	pin=1
}
letExpr ::= LET localLet IN exprT {
}
caseExpr ::= CASE exprT typeSig? LBRACE cases RBRACE { pin=1 }
plusExpr ::= expr PLUS expr
pipeExpr ::= expr (TRIANGLE_L | TRIANGLE_R) expr
appExpr ::= expr atomic+
projExpr ::= expr DOT nameDef
sigExpr ::= sigDom AND expr
succExpr ::= SUCC atomic { pin=1 }
setExpr ::= SET expr?
cosetExpr ::= COSET expr { pin=1 }
numberExpr ::= NUMBER TIMES expr { pin=2 }
keywordExpr ::= SIZE | MAX | INFTY | METAVAR | NUMBER
tupleExpr ::= LPAREN exprT RPAREN
angleExpr ::= LT exprT typeSig GT

private atomic ::=
   nameExpr
 | succExpr
 | tupleExpr
 | angleExpr
 | keywordExpr
