//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.mlpolyr.MLPolyRParser"

  psiClassPrefix="MLPolyR"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.mlpolyr"
  psiImplPackage="org.ice1000.tt.psi.mlpolyr.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.mlpolyr.MLPolyRTypes"
  elementTypeClass="org.ice1000.tt.psi.mlpolyr.MLPolyRElementType"
  tokenTypeClass="org.ice1000.tt.psi.mlpolyr.MLPolyRTokenType"

  extends(".*Exp")=exp
  extends(".*Pat")=pat
}

// Reference: https://github.com/owo-lang/MLPolyR/blob/master/mlpolyr.grm
program ::= exp

function ::= namePat pat* EQ exp {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.mlpolyr.MLPolyRPatListOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRFunctionMixin'
}
private functions ::= function functionRest*
private functionRest ::= KW_AND function { pin=1 }

private rcRest ::= KW_AND rc { pin=1 }
private rcList ::= rc rcRest*
optRcl ::= KW_WITH KW_CASES rcList? { pin=1 }
rc ::= namePat EQ exp {
	pin=2
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRRcMixin'
}

asPat ::= pat KW_AS pat
listPat ::= LP patList? RP {
	pin=1
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRParameterPatMixin'
}
cbPat ::= cbPatImpl { pin=1 }
cbbPat ::= LCBB fieldPatterns? RCBB {
	pin=1
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRCbbPatMixin'
}
bqPat ::= BQ cbPatImpl { pin=1 }
wildPat ::= WILD
namePat ::= ID {
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRNamePatMixin'
}
pat ::=
   asPat
 | bqPat
 | listPat
 | cbPat
 | cbbPat
 | namePat
 | wildPat {
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRGeneralPat'
	implements=['org.ice1000.tt.psi.IPattern<MLPolyRNamePat>' 'com.intellij.psi.PsiNameIdentifierOwner']
}

private patList ::= pat patRest*
private patRest ::= COMMA pat { pin=1 }
private fieldPatterns ::= fieldPattern fieldPatternRest*
private fieldPatternRest ::= COMMA fieldPattern { pin=1 }
private cbPatImpl ::= LCB fieldPatterns? RCB { pin=1 }
private labelPattern ::= ID | INT
private dotDotDotPattern ::= DOTDOTDOT (EQ pat)? { pin=1 }
private labelPatternImpl ::= labelPattern EQ pat { pin=1 }
fieldPattern ::=
   namePat
 | labelPatternImpl
 | dotDotDotPattern

private defs ::= def*
private funDef ::= KW_FUN functions? optRcl? { pin=1 }
private valDef ::= KW_VAL pat EQ exp { pin=1 }
def ::= valDef | funDef {
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRDefMixin'
}

ifExp ::= KW_IF exp KW_THEN exp KW_ELSE exp { pin=1 }
raiseExp ::= KW_RAISE exp { pin=1 }
matchExp ::= KW_MATCH exp KW_WITH exp { pin=1 }
caseExp ::= KW_CASE exp KW_OF dtMatch { pin=1 }
whereExp ::= exp KW_WHERE recordExp
orElseExp ::= exp KW_ORELSE exp
andAlsoExp ::= exp KW_ANDALSO exp
deqExp ::= exp DEQ exp
ltEqExp ::= exp LTEQ exp
gtEqExp ::= exp GTEQ exp
ltExp ::= exp LT exp
gtExp ::= exp GT exp
neqExp ::= exp NEQ exp
dColonExp ::= exp DCOLON exp { rightAssociative=true }
plusExp ::= exp PLUS exp
minusExp ::= exp MINUS exp
timesExp ::= exp TIMES exp
divExp ::= exp DIV exp
modExp ::= exp MOD exp
appExp ::= exp atomicExp+
prefixExp ::=
 ( MINUS
 | KW_ISNULL
 | KW_NOT
 | con
 )+ exp
assignExp ::= exp ASSIGN exp
tryExp ::= KW_TRY pat EQ exp KW_IN exp handlers KW_END {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwnerMixin'
}
fnExp ::= KW_FN handling0 {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwnerMixin'
}
letExp ::= KW_LET defs KW_IN expSeq KW_END {
	pin=1
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRLetExpMixin'
}
casesExp ::= KW_CASES mrList defaultMatch? {
	pin=1
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRCasesExpMixin'
}

exp ::=
   raiseExp
 | letExp
 | ifExp
 | caseExp
 | tryExp
 | matchExp
 | casesExp
 | fnExp
 | assignExp
 | whereExp
 | orElseExp
 | andAlsoExp
 | deqExp
 | ltEqExp
 | ltExp
 | gtEqExp
 | gtExp
 | neqExp
 | dColonExp
 | plusExp
 | minusExp
 | prefixExp
 | suffixExp
 | timesExp
 | divExp
 | modExp
 | appExp
 | atomicExp

private dtMatch2 ::= pat DCOLON handling0 BAR LSB RSB DARROW exp { pin=1 }
private dtMatch1 ::= LSB RSB DARROW exp BAR pat DCOLON handling0 { pin=1 }
dtMatch ::= dtMatch1 | dtMatch2 {
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRPatListOwnerMixin'
	implements=['org.ice1000.tt.psi.mlpolyr.MLPolyRPatListOwner']
}

suffixExp ::= atomicExp
 ( DOT label
 | EXCLAM label
 | PLUSPLUS label
 )+

atomicExp ::=
   KW_TRUE
 | KW_FALSE
 | KW_NOCASES
 | INT
 | string
 | identifier
 | LP RP
 | LP expSeq RP
 | LP expList RP
 | LSB expList? RSB
 | recordExp

private bbRecord ::= LCBB fields? RCBB { pin=1 }
private bRecord ::= LCB fields? RCB { pin=1 }
recordExp ::= bRecord | bbRecord
private fields ::= field fieldRest*
private fieldRest ::= COMMA field { pin=1 }
field ::=
   labelField
 | dotDotDotField
 | identifier
private labelField ::= label EQ exp { pin=2 }
private dotDotDotField ::= DOTDOTDOT EQ exp { pin=1 }

label ::= ID | INT { mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRLabelMixin' }
con ::= BQ label { pin=1 }

private expList ::= exp expListRest*
private expListRest ::= COMMA exp { pin=1 }
private expSeq ::= exp expSeqRest*
private expSeqRest ::= SEMI exp { pin=1 }

private mrList ::= mr mrRest*
private mrRest ::= BAR mr { pin=1 }
mr ::= BQ label handling0 {
	pin=1
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwnerMixin'
}

rehandling ::= KW_REHANDLING mrList { pin=1 }
private handling0 ::= pat DARROW exp { pin=2 }
private handling1 ::= mr BAR handling { pin=2 }
private handling2 ::= KW_HANDLING handling { pin=1 }
handling ::= handling0 | mr | handling1 {
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwner']
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRPatOwnerMixin'
}

handlers ::= handling2? rehandling?
defaultMatch ::= KW_DEFAULT COLON exp { pin=1 }

identifier ::= ID { mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRIdentifierMixin' }
string ::= STR {
	mixin='org.ice1000.tt.psi.mlpolyr.MLPolyRStringMixin'
	implements=['com.intellij.psi.PsiLanguageInjectionHost']
}
