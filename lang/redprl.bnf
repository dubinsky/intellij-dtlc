//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.redprl.RedPrlParser"

  psiClassPrefix="RedPrl"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.redprl"
  psiImplPackage="org.ice1000.tt.psi.redprl.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.redprl.RedPrlTypes"
  elementTypeClass="org.ice1000.tt.psi.redprl.RedPrlElementType"
  tokenTypeClass="org.ice1000.tt.psi.redprl.RedPrlTokenType"

  extends("mlCmd.+")=mlCmd
  extends("mlDecl.+")=mlDecl
  extends("multitac.+")=atomicMultitac
  extends("[^T]+Tac")=tac
}

// Regular expressions:
//  s/\(Ast\.\$\$[^\n]+//rg

// Reference: https://github.com/RedPRL/sml-redprl/blob/master/src/redprl/redprl.grm
file ::= mlDecl mlDeclRest*
private mlDeclRest ::= DOT mlDecl? { pin=1 }

private ident ::= varUsage | opUsage
boundVar ::= VARNAME | UNDER {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarMixin'
}

sort ::=
   EXP
 | TAC_KW
 | JDG
 | LVL
 | KND
 | DIM

opUsage ::= OPNAME {
	extends=mlValue
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpUsageMixin'
}
opDecl ::= OPNAME {
	implements=[
		'com.intellij.psi.PsiNameIdentifierOwner'
		'org.ice1000.tt.psi.redprl.RedPrlKindedSymbol'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpDeclMixin'
}
varUsage ::= VARNAME {
	extends=termAndTac
	extends=term
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarUsageMixin'
}
varDecl ::= VARNAME {
	implements=[
		'com.intellij.psi.PsiNameIdentifierOwner'
		'org.ice1000.tt.psi.redprl.RedPrlKindedSymbol'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarDeclMixin'
}

numAsDimension ::= NUMERAL

bindingSig ::= LSQUARE (sort (COMMA sort)*)? RSQUARE DOT { pin=1 }
private valence ::= bindingSig? sort { pin=1 }

private dimension ::= varUsage | metaUsage | numAsDimension
dir ::= dimension SQUIGGLE_RIGHT_ARROW dimension
backDir ::= dimension SQUIGGLE_LEFT_ARROW dimension
equation ::= dimension EQUALS dimension
tube ::= LSQUARE equation binding RSQUARE
boundary ::= LSQUARE equation term RSQUARE
metaDecl ::= HASH (VARNAME | OPNAME) {
	pin=1
	implements=[
		'com.intellij.psi.PsiNameIdentifierOwner'
		'org.ice1000.tt.psi.redprl.RedPrlKindedSymbol'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlMetaDeclMixin'
}

metaUsage ::= HASH (VARNAME | OPNAME) {
	pin=1
	extends=termAndTac
	mixin='org.ice1000.tt.psi.redprl.RedPrlMetaUsageMixin'
}

typedBinder ::= LSQUARE boundVar+ COLON term RSQUARE {
	pin=4
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarsOwnerMixin'
}
dimBinder ::= LSQUARE boundVar+ COLON DIM RSQUARE {
	pin=4
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarsOwnerMixin'
}

arrowQuantifierData ::=
   typedBinder arrowQuantifierData
 | dimBinder arrowQuantifierData
 | term arrowQuantifierData
 | DIM arrowQuantifierData
 | term {
	mixin='org.ice1000.tt.psi.redprl.RedPrlAnywayMixin'
}
timesQuantifierData ::=
   typedBinder timesQuantifierData
 | term timesQuantifierData
 | term

field ::= LSQUARE ident term RSQUARE
private binder ::= LSQUARE boundVar+ RSQUARE
binding ::= binder? term {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarsOwnerMixin'
}

nullaryOperator ::=
 /* axiom */
   AX
 /* bools */
 | BOOL
 | TT
 | FF
 /* natural numbers */
 | NAT
 | ZERO
 /* integers */
 | INT
 /* void */
 | VOID
 /* circle */
 | S1
 | BASE

 | kind

multinaryOperator ::=
 /* bools */
   IF
 /* natural numbers */
 | SUCC
 | NAT_REC
 /* integers */
 | POS
 | NEGSUCC
 | INT_REC
 /* S1 */
 | S1_REC
 /* paths */
 | PATH
 /* lines */
 | LINE
 /* pushouts */
 | PUSHOUT
 | LEFT
 | RIGHT
 | GLUE
 | PUSHOUT_REC
 /* coequalizers */
 | COEQUALIZER
 | CECOD
 | CEDOM
 | COEQUALIZER_REC
 /* equality */
 | EQUALS
 /* V */
 | V
 | VIN
 | VPROJ

private customOpTermParen ::= LPAREN opUsage binding+ RPAREN { pin=2 }
customOpTerm ::= customOpTermParen | opUsage { extends=termAndTac }

private inductiveTermInside ::=
   TYPE binding*
 | ident binding*
 | REC binding+
inductiveTerm ::= LPAREN DOT opUsage inductiveTermInside RPAREN {
	extends=termAndTac
	pin=2
}

patVar ::=
   PERCENT LSQUARE varUsage COLON sort RSQUARE
 | PERCENT varUsage

termAndTac ::=
 /* custom operators */
   customOpTerm

 /* inductive types */
 | inductiveTerm

 /* built-in operators that can be handled uniformly */
 | nullaryOperator
 | ttMultinary
 | ttUniverse
 | ttLoop

 /* Kan operators */
 | ttCoe
 | ttFcom
 | ttHcom
 | ttCom
 | ttBox
 | ttCap
 | ttEcom

 /* numbers */
 | NUMERAL
 | ttDimNatInt

 /* function types */
 | ttRArrow
 | ttLam
 | ttDollar

 /* pair types */
 | ttTimes

 /* dependent record types */
 | RECORD
 | ttParenRecord
 | TUPLE
 | ttTuple
 | ttBang

 /* paths */
 | ttAbs
 | ttAt

 /* Abbreviation for membership */
 | ttMem

 /* meta variable */
 | metaUsage
 /* pattern variables */
 | patVar
 | ttMetaOrPattern

 /* levels */
 | ttPlus
 | ttDoublePlus
 | ttLMax
 | varUsage {
	extends=tac
	extends=term
	extends=atomicMultitac
	mixin='org.ice1000.tt.psi.redprl.RedPrlAnywayMixin'
}

private ttCoe ::= LPAREN COE dir binding term RPAREN { pin=2 }
private ttFcom ::= LPAREN FCOM dir term tube* RPAREN { pin=2 }
private ttHcom ::= LPAREN HCOM dir binding term tube* RPAREN { pin=2 }
private ttCom ::= LPAREN COM dir binding term tube* RPAREN { pin=2 }
private ttBox ::= LPAREN BOX dir term boundary* RPAREN { pin=2 }
private ttCap ::= LPAREN CAP backDir term tube* RPAREN { pin=2 }
private ttEcom ::= LPAREN ECOM dir term tube* RPAREN { pin=2 }
private ttLoop ::= LPAREN LOOP dimension RPAREN { pin=2 }
private ttLam ::= LPAREN LAMBDA LSQUARE boundVar+ RSQUARE term RPAREN { pin=2 }
private ttDollar ::= LPAREN DOLLAR_SIGN term term+ RPAREN { pin=2 }
private ttTimes ::= LPAREN TIMES timesQuantifierData RPAREN { pin=2 }
private ttTuple ::= LPAREN TUPLE (field+ | term+) RPAREN { pin=2 }
private ttAbs ::= LPAREN ABS LSQUARE boundVar+ RSQUARE term RPAREN { pin=2 }
private ttAt ::= LPAREN AT_SIGN term dimension+ RPAREN { pin=2 }
private ttMem ::= LPAREN MEM term term RPAREN { pin=2 }
private ttDoublePlus ::= LPAREN DOUBLE_PLUS level RPAREN { pin=2 }
private ttPlus ::= LPAREN PLUS level NUMERAL RPAREN { pin=2 }
private ttMultinary ::= LPAREN multinaryOperator binding+ RPAREN { pin=2 }
private ttUniverse ::= LPAREN UNIVERSE level term? RPAREN { pin=2 }
private ttLMax ::= LPAREN LMAX level+ RPAREN { pin=2 }
private ttBang ::= LPAREN BANG ident term RPAREN { pin=2 }
private ttRArrow ::= LPAREN RIGHT_ARROW arrowQuantifierData RPAREN { pin=2 }
private ttDimNatInt ::= LPAREN (DIM | NAT | INT) NUMERAL RPAREN { pin=2 }
private ttMetaOrPattern ::= LPAREN (metaUsage | patVar) term+ RPAREN { pin=2 }
private ttParenRecord ::= LPAREN RECORD typedBinder+ RPAREN { pin=2 }

level ::=
   NUMERAL
 | ttPlus
 | ttDoublePlus
 | ttLMax
 | metaUsage
 | PERCENT varUsage

term ::=
   tacTerm
 | jdkTerm
 | lvlTerm
 | termAndTac
private tacTerm ::= HASH TAC_KW LBRACKET tactic RBRACKET { pin=2 }
private lvlTerm ::= HASH LVL LBRACKET level RBRACKET { pin=2 }
private jdkTerm ::= HASH JDG LBRACKET judgment RBRACKET { pin=2 }

kind ::=
   DISCRETE
 | KAN
 | HCOM
 | COE
 | PRE
withKind ::= WITH term
judgment ::=
   eqInJudgement
 | inJudgement
 | trueJudgement
 | eqTypeJudgement
 | typeJudgement
 | term

private eqInJudgement ::= term EQUALS inJudgement { pin=2 }
private inJudgement ::= term IN term { pin=2 }
private trueJudgement ::= term TRUE_KW { pin=2 }
private eqTypeJudgement ::= term EQUALS typeJudgement { pin=2 }
private typeJudgement ::= term TYPE withKind? { pin=2 }

specTube ::= LSQUARE equation specBinding RSQUARE
specBoundary ::= LSQUARE equation specTerm RSQUARE

specArrowQuantifierData ::= (typedBinder | term)* specType
specType ::= SELF | LPAREN SELF RIGHT_ARROW specArrowQuantifierData RPAREN
specTypedBinder ::= LSQUARE boundVar+ COLON specType RSQUARE {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarsOwnerMixin'
}

specBinding ::= binder? specTerm

specTerm ::=
   term

 /* intro */
 | introSpecTerm

 /* fcom */
 | fcomSpecTerm

 /* lambda and applications */
 | lamSpecTerm
 | appSpecTerm

private appSpecTerm ::= LPAREN SELF DOLLAR_SIGN specTerm term+ RPAREN { pin=3 }
private lamSpecTerm ::= LPAREN SELF LAMBDA LSQUARE boundVar+ RSQUARE specTerm RPAREN { pin=3 }
private fcomSpecTerm ::= LPAREN SELF FCOM dir specTerm specTube+ RPAREN { pin=3 }
private introSpecTerm ::= LPAREN SELF ident specBinding* RPAREN { pin=3 }

private possibleDataConstructor ::=
   typedBinder
 | dimBinder
 | specTypedBinder
 | specType
 | specBoundary+
 | term
 | DIM
private dataConstructors ::= dataConstructor dataConstructorRest*
private dataConstructorRest ::= COMMA dataConstructor { pin=1 }
dataConstructor ::= ident possibleDataConstructor*

dataDecl ::=
 (typedBinder | dimBinder)*
 COLON LPAREN UNIVERSE level KAN RPAREN LBRACKET dataConstructors RBRACKET

private recordFieldTactics ::= recordFieldTactic recordFieldTacticRest*
private recordFieldTacticRest ::= COMMA recordFieldTactic { pin=1 }
recordFieldTactic ::= varUsage EQUALS tactic { pin=2 }

private devAppSpineRest ::= COMMA devAppSpine { pin=1 }
private bracketedDevAppSpine ::= LSQUARE devAppSpine? RSQUARE { pin=1 }
devAppSpine ::= tactic devAppSpineRest*

private devDecompPatternFields ::= LBRACKET tupleDecompPattern? RBRACKET { pin=1 }
devDecompPattern ::= varDecl | UNDER | devDecompPatternFields {
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlVarOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarOwnerMixin'
}
labeledDecompPattern ::= varUsage EQUALS devDecompPattern { pin=2 }

private labeledDecompPatternRest ::= COMMA labeledDecompPattern { pin=1 }
labeledTupleDecompPattern ::= labeledDecompPattern labeledDecompPatternRest*

private devDecompPatternRest ::= COMMA devDecompPattern { pin=1 }
anonTupleDecompPattern ::= devDecompPattern devDecompPatternRest* {
	mixin='org.ice1000.tt.psi.redprl.RedPrlDevDecompPatternOwnerMixin'
}

private tupleDecompPattern ::=
   labeledTupleDecompPattern
 | anonTupleDecompPattern
devMatchClause ::= LSQUARE (varDecl+ PIPE)? term
 DOUBLE_RIGHT_ARROW tactic RSQUARE {
	pin=1
	mixin='org.ice1000.tt.psi.redprl.RedPrlDevMatchClauseMixin'
}

selector ::= CONCL | elimTarget
accessor ::= TYPE | LEFT | RIGHT

private elimTarget ::= varUsage | metaUsage

tac ::=
   refineTac
 | simpleTac
 | elimTac
 | rewriteTac
 | reduceTac
 | unfoldTac
 | backtickTac
 | exactTac
 // %prec DOUBLE_PIPE
 | tacPipeTac
 | lambdaTac
 | absTac
 | bracketTac
 | withoutTac
 | withTac
 | ifTac
 | claimTac
 | letElimTac
 | letCustomTac
 | useElimTac
 | useCustomTac
 | caseTac
 | matchTac
 | queryTac
 | printTac

 /* overlapping with term */
 | termAndTac

// No-pin tactics
useElimTac ::= USE elimTarget bracketedDevAppSpine?
useCustomTac ::= USE customOpTerm bracketedDevAppSpine?
letCustomTac ::= LET devDecompPattern EQUALS
 customOpTerm bracketedDevAppSpine? SEMI tactic {
	mixin='org.ice1000.tt.psi.redprl.RedPrlDevDecompPatternOwnerMixin'
}
letElimTac ::= LET devDecompPattern EQUALS
 elimTarget bracketedDevAppSpine? SEMI tactic {
	mixin='org.ice1000.tt.psi.redprl.RedPrlDevDecompPatternOwnerMixin'
}

// Simple (can-pin) tactics
elimTac ::= TAC_ELIM elimTarget { pin=1 }
refineTac ::= REFINE varUsage { pin=1 }
queryTac ::= QUERY varDecl LEFT_ARROW selector SEMI tactic {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlVarOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarOwnerMixin'
}
printTac ::= PRINT term { pin=1 }
caseTac ::= CASE elimTarget OF
 BASE DOUBLE_RIGHT_ARROW tactic
 PIPE LOOP varDecl DOUBLE_RIGHT_ARROW tactic {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlVarOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarOwnerMixin'
}
matchTac ::= MATCH term LBRACKET devMatchClause* RBRACKET { pin=1 }
ifTac ::= IF elimTarget THEN tactic ELSE tactic { pin=1 }
backtickTac ::= BACK_TICK term { pin=1 }
claimTac ::= CLAIM varDecl COLON judgment
 BY LBRACKET tactic RBRACKET SEMI tactic {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlVarOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlVarOwnerMixin'
}
exactTac ::= RULE_EXACT term { pin=1 }
absTac ::= ABS boundVar+ DOUBLE_RIGHT_ARROW tactic {
	pin=1
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarsOwnerMixin'
}
lambdaTac ::= LAMBDA devDecompPattern+ DOUBLE_RIGHT_ARROW tactic {
	pin=1
	mixin='org.ice1000.tt.psi.redprl.RedPrlDevDecompPatternOwnerMixin'
}
bracketTac ::= LBRACKET (recordFieldTactics | tactics)? RBRACKET { pin=1 }
withoutTac ::= WITHOUT term+ { pin=1 }
withTac ::= WITH hypBinding* DOUBLE_RIGHT_ARROW tactic {
	pin=1
	mixin='org.ice1000.tt.psi.redprl.RedPrlWithTacMixin'
}

// Left-recursive tactics
tacPipeTac ::= tac DOUBLE_PIPE tactic

// Complicated tactics
private accessAndSelect ::= atAccessor inSelector? | inSelector atAccessor?
private inSelector ::= IN selector { pin=1 }
private atAccessor ::= AT accessor+ { pin=1 }
rewriteTac ::= TAC_REWRITE term accessAndSelect? { pin=1 }
unfoldTac ::= TAC_UNFOLD opUsage+ accessAndSelect? { pin=1 }
reduceTac ::= TAC_REDUCE accessAndSelect? { pin=1 }

// Atomic tactics
simpleTac ::=
   TAC_ID
 | TAC_FAIL
 | TAC_AUTO_STEP
 | TAC_SYMMETRY
 | TAC_INVERSION
 | TAC_ASSUMPTION

atomicMultitac ::=
   multitacSquare
 | multitacHash
 | multitacRepeat
 | multitacAuto
 | multitacProgress
 | multitacParen
 | hole
 /// %prec SEMI
 | tac {
	extends=tactic
}

multitacSquare ::= LSQUARE tactics RSQUARE { pin=1 }
multitacRepeat ::= MTAC_REPEAT LBRACKET tactic RBRACKET { pin=1 }
multitacAuto ::= MTAC_AUTO
multitacProgress ::= MTAC_PROGRESS LBRACKET tactic RBRACKET { pin=1 }
multitacParen ::= LPAREN tactic RPAREN
multitacHash ::= HASH NUMERAL LBRACKET tactic RBRACKET { pin=2 }
hole ::= HOLENAME { extends=atomicMultitac }

private tactics ::= tactic (COMMA tactic)* COMMA?
tactic ::= atomicMultitac (SEMI atomicMultitac?)* SEMI?

hypBinding ::= boundVar (COLON sort)? {
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlBoundVarOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlBoundVarOwnerMixin'
}

private declArguments ::= declArgument declArgumentRest*
private declArgumentRest ::= COMMA declArgument { pin=1 }
declArgument ::= metaDecl (COLON valence)? {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.redprl.RedPrlDeclArgumentMixin'
}

/// Should always use `declArgumentsParensOpt` instead of `declArgumentsParens`
declArgumentsParens ::= LPAREN declArguments? RPAREN {
	pin=1
	mixin='org.ice1000.tt.psi.redprl.RedPrlDeclArgumentsParensMixin'
}

private mlVtyBrack ::= LBRACKET mlCty RBRACKET { pin=1 }
mlVty ::= mlParen | mlVtyBrack

private mlCtyCaret ::= CARET mlVty { pin=1 }
private mlCtyVty ::= mlVty RIGHT_ARROW mlCty { pin=2 }
mlCty ::= mlCtyCaret | mlCtyVty

private mlParen ::= LPAREN RPAREN
private mlValueBrack ::= LBRACKET mlCmd RBRACKET { pin=1 }
mlValue ::=
   opUsage
 | mlValueBrack
 | mlParen {
	methods=[mlCmd='']
}

private mlAtomicPrint ::= PRINT mlValue { pin=1 }
private mlAtomicExtract ::= EXTRACT mlValue { pin=1 }
private mlAtomicCaret ::= CARET mlValue { pin=1 }
private mlAtomicBang ::= BANG mlValue { pin=1 }
mlAtomicCmd ::=
   mlAtomicPrint
 | QUIT
 | mlAtomicExtract
 | mlAtomicCaret
 | mlAtomicBang { extends=mlCmd }

mlCmdLet ::= LET mlDecl SEMI mlCmd {
	pin=1
	extends=mlCmd
}
mlCmdFn ::= FN opDecl COLON mlVty DOUBLE_RIGHT_ARROW mlCmd {
	pin=1
	extends=mlCmd
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}
mlCmdValue ::= mlValue RANGLE mlCmd {
	pin=1
	extends=mlCmd
}

mlCmd ::=
   mlCmdLet
 | mlCmdFn
 | mlCmdValue
 | mlAtomicCmd

mlDeclDef ::= DEFINE opDecl declArgumentsParens?
 (COLON sort)? EQUALS term {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}
mlDeclData ::= DATA opDecl declArgumentsParens? dataDecl
 BY LBRACKET tactic RBRACKET {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}
mlDeclTactic ::= TACTIC_KW opDecl declArgumentsParens?
 EQUALS LBRACKET tactic RBRACKET {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}
mlDeclTheorem ::= THEOREM opDecl declArgumentsParens? COLON judgment
 BY LBRACKET tactic RBRACKET {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}
mlDeclVal ::= VAL opDecl EQUALS mlCmd {
	pin=1
	implements=[
		'org.ice1000.tt.psi.redprl.RedPrlOpOwner'
		'com.intellij.psi.PsiNameIdentifierOwner'
	]
	mixin='org.ice1000.tt.psi.redprl.RedPrlOpOwnerMixin'
}

mlDecl ::=
   mlDeclDef
 | mlDeclData
 | mlDeclTactic
 | mlDeclTheorem
 | mlDeclVal
 | mlCmd
