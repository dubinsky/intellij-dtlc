//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.mlang.MlangParser"

  psiClassPrefix="Mlang"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.mlang"
  psiImplPackage="org.ice1000.tt.psi.mlang.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.mlang.MlangTypes"
  elementTypeClass="org.ice1000.tt.psi.mlang.MlangElementType"
  tokenTypeClass="org.ice1000.tt.psi.mlang.MlangTokenType"

  extends(".*Expr")=term
  mixin("declare|define")='org.ice1000.tt.psi.mlang.MlangGeneralDeclaration'
  mixin('parameters')='org.ice1000.tt.psi.mlang.MlangParametersMixin'
  implements("parameters|declare|define")='org.ice1000.tt.psi.mlang.DeclarationMarker'
  mixin("patternMultiple.+|recordExpr|sumExpr")="org.ice1000.tt.psi.mlang.MlangPatternOwnerMixin"
  mixin("letExpr")='org.ice1000.tt.psi.mlang.MlangLetMixin'
  implements('lambdaExpr')='org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>'
  mixin('lambdaExpr')='org.ice1000.tt.psi.mlang.MlangLambdaMixin'
}

file ::= declaration*

private declaration ::= parameters | declare | define

defineModifiers ::= KW_INDUCTIVELY | KW_WITH_CONSTRUCTOR | KW_DEBUG
ident ::= IDENTIFIER {
	implements=['org.ice1000.tt.psi.IPattern<MlangIdent>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangIdentMixin'
}

private typeAnnotation ::= COLON term { pin=1 }

paramIdent ::= HASH? paramIdentExplicit {
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangParamIdentMixin'
}
paramIdentExplicit ::= (IDENTIFIER | IGNORED) {
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangParamIdentExplicitMixin'
}

param ::= paramIdent* typeAnnotation {
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangParamMixin'
}
private paramRest ::= COMMA param { pin=1 }
private paramIdentRest ::= COMMA paramIdent { pin=1 }
private teleParen ::= LPAREN tele RPAREN
tele ::= param paramRest* {
	pin=1
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangManyParamsMixin'
}

private appliedTerm ::= AT? term { pin=1 }
private appliedTermRest ::= COMMA appliedTerm { pin=1 }

define ::= KW_DEFINE defineModifiers* ident teleParen? typeAnnotation? EQ term { pin=1 }
declare ::= KW_DECLARE defineModifiers* ident teleParen? typeAnnotation? { pin=1 }
parameters ::= KW_PARAMETERS teleParen LBRACE declaration* RBRACE { pin=1 }

private andOr ::= AND | OR
private glueKeywords ::= KW_GLUE | KW_GLUE_TYPE | KW_HCOMP | KW_HFILL
private fillKeywords ::= KW_FILL | KW_COMP
heterogeneous ::= LBRACK term RBRACK { pin=1 }

field ::= KW_FIELD param {
	pin=1
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangFieldMixin'
}

case ::= KW_CASE (case1 | case2) {
	pin=1
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangCaseMixin'
}
private case1 ::= paramIdent LPAREN tele face* RPAREN { pin=2 }
private case2 ::= paramIdent+

face ::= BAR term typeAnnotation { pin=1 }
namedPattern ::= refExpr LPAREN paramIdent paramIdentRest* RPAREN {
	pin=2
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangManyParamsMixin'
}

private pattern ::= namedPattern | paramIdent

patternContinue ::= ARROW term | patternExpr
patternCases ::= patternCaseEmpty | patternCaseSingle | patternMultiple

patternCaseEmpty ::= TOP {
	extends=patternCases
}
patternCaseSingle ::= MATRIX_SING pattern patternContinue {
	implements=['org.ice1000.tt.psi.IPattern<MlangParamIdentExplicit>' 'com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.mlang.MlangPatternOwnerMixin'
	extends=patternCases
}
patternMultiple ::= patternMultipleStart patternMultipleCont* patternMultipleEnd {
	extends=patternCases
}

patternMultipleStart ::= MATRIX_START pattern patternContinue { pin=1 }
patternMultipleCont ::= MATRIX_CONT pattern patternContinue { pin=1 }
patternMultipleEnd ::= MATRIX_END pattern patternContinue { pin=1 }

keywordExpr ::= KW_TYPE | KW_INTERVAL | KW_MAKE | META_VAR
  | KW_UNDEFINED | DIM | KW_TRANSP | KW_UNGLUE
refExpr ::= IDENTIFIER { mixin='org.ice1000.tt.psi.mlang.MlangRefExprGeneratedMixin' }
upExpr ::= LIFT+ term
letExpr ::= KW_RUN LBRACE declaration* term RBRACE { pin=1 }
andOrExpr ::= term andOr term
negExpr ::= NEG term { pin=1 }
pathExpr ::= term TRIPLE_EQ heterogeneous? term
ascriptionExpr ::= LPAREN term KW_AS term RPAREN { pin=3 }
parenExpr ::= LPAREN term RPAREN { pin=1 }
appExpr ::= term LPAREN (appliedTerm appliedTermRest*)? RPAREN
lambdaExpr ::= paramIdent ARROW term { pin=2 }
piExpr ::= teleParen DARROW term
piSimpleExpr ::= term DARROW term
recordExpr ::= KW_RECORD LBRACE field* RBRACE { pin=1 }
sumExpr ::= KW_SUM LBRACE case* RBRACE { pin=1 }
projectionExpr ::= term DOT (KW_MAKE | IDENTIFIER)
glueExpr ::= glueKeywords LPAREN term face* RPAREN { pin=1 }
fillExpr ::= fillKeywords LPAREN term COLON term face* RPAREN { pin=1 }
patternExpr ::= IGNORED patternContinue | HASH? patternCases
term ::=
   upExpr
 | andOrExpr
 | letExpr
 | lambdaExpr
 | keywordExpr
 | refExpr
 | piExpr
 | appExpr
 | negExpr
 | recordExpr
 | sumExpr
 | ascriptionExpr
 | pathExpr
 | projectionExpr
 | glueExpr
 | fillExpr
 | patternExpr
 | piSimpleExpr
 | parenExpr
