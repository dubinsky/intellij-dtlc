//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.cubicaltt.CubicalTTParser"

  psiClassPrefix="CubicalTT"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.cubicaltt"
  psiImplPackage="org.ice1000.tt.psi.cubicaltt.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.cubicaltt.CubicalTTTypes"
  elementTypeClass="org.ice1000.tt.psi.cubicaltt.CubicalTTElementType"
  tokenTypeClass="org.ice1000.tt.psi.cubicaltt.CubicalTTTokenType"

  extends(".*Exp")=exp
}

entryPoints ::= module | exp

nameDecl ::= IDENTIFIER {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTNameDeclMixin'
}
nameUsage ::= IDENTIFIER {
	extends=formula
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTNameMixin'
}
moduleUsage ::= IDENTIFIER { mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTModuleUsageMixin' }
// Have to make a wrapper due to a (seem-to-be) bug of Grammar-Kit.
nameExp ::= IDENTIFIER {
	extends=exp
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTNameMixin'
}
module ::= KW_MODULE nameDecl KW_WHERE
 LAYOUT_START
  imports
  decls
 LAYOUT_END? {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTModuleMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'com.intellij.navigation.NavigationItem']
	stubClass='org.ice1000.tt.psi.cubicaltt.CubicalTTModuleStub'
	elementTypeFactory='org.ice1000.tt.psi.cubicaltt.StubsKt.factory'
}

private imports ::= (import LAYOUT_SEP)*
import ::= KW_IMPORT moduleUsage {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTImportMixin'
}

private decls ::= (decl LAYOUT_SEP?)*
private decl ::=
   def
 | data
 | mutual
 | opaque
 | transparent
 | transparentAll

def ::= nameDecl teles COLON exp EQ defBody {
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDefMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.cubicaltt.CubicalTTDecl']
	stubClass='org.ice1000.tt.psi.cubicaltt.CubicalTTDefStub'
	elementTypeFactory='org.ice1000.tt.psi.cubicaltt.StubsKt.factory'
}
data ::= (KW_DATA | KW_HDATA) nameDecl teles EQ labels {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDataMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.cubicaltt.CubicalTTDecl']
	stubClass='org.ice1000.tt.psi.cubicaltt.CubicalTTDataStub'
	elementTypeFactory='org.ice1000.tt.psi.cubicaltt.StubsKt.factory'
}
private defBody ::= expWhere | splitBody | KW_UNDEFINED
mutual ::= KW_MUTUAL LAYOUT_START decls LAYOUT_END {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
}
opaque ::= KW_OPAQUE nameUsage { pin=1 }
transparent ::= KW_TRANSPARENT nameUsage { pin=1 }
transparentAll ::= KW_TRANSPARENT_ALL

expWhere ::= exp (KW_WHERE LAYOUT_START decls LAYOUT_END?)? { pin=1 }
splitBody ::= KW_SPLIT LAYOUT_START branches LAYOUT_END? { pin=1 }

// Telescopes
private teles ::= tele*
// Nonempty telescopes with exp:s, this is hack to avoid ambiguities
// in the grammar when parsing Pi
// In Grammar-Kit we don't need this shit
private pteles ::= tele+
tele ::= LPAREN nameDecl+ COLON exp RPAREN {
	pin=3
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
}

// Labelled sum alternatives
private labels ::= (label BAR?)*
label ::= nameDecl teles (LT nameDecl* GT system)? {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTLabelMixin'
	implements=['com.intellij.psi.PsiNameIdentifierOwner' 'org.ice1000.tt.psi.cubicaltt.CubicalTTDecl']
	stubClass='org.ice1000.tt.psi.cubicaltt.CubicalTTLabelStub'
	elementTypeFactory='org.ice1000.tt.psi.cubicaltt.StubsKt.factory'
}

exp ::= appExp | nonApp
private nonApp ::=
   pConExp
 | expExpExp
 | pLamExp
 | lamExp
 | sysExp
 | sysExpExp
 | appFormulaExp
 | funExp
 | letExp
 | splitExp
 | dtExp
 | idJExp
 | atomic

private atomic ::=
   projectionExp
 | pairExp
 | typeExp
 | holeExp
 | transExp
 | nameExp
 | parenExp

appExp ::= exp nonApp+
funExp ::= exp ARROW exp
appFormulaExp ::= exp AT formula
letExp ::= KW_LET LAYOUT_START decls LAYOUT_END? KW_IN exp {
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
	pin=1
}
lamExp ::= LAMBDA pteles ARROW exp {
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
	pin=1
}
pLamExp ::= LT nameDecl+ GT exp {
	pin=1
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
}
splitExp ::= KW_SPLIT_AT exp KW_WITH LAYOUT_START branches LAYOUT_END { pin=1 }
dtExp ::= pteles (ARROW | TIMES) exp {
	pin=2
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
}
expExpExp ::= expExpExpKeywords atomic atomic atomic { pin=1 }
private expExpExpKeywords ::= KW_PATH_P | KW_ID
sysExpExp ::= sysExpExpKeywords atomic atomic system { pin=1 }
private sysExpExpKeywords ::= KW_COMP | KW_HCOMP | KW_FILL
sysExp ::= sysExpKeywords atomic system { pin=1 }
private sysExpKeywords ::= KW_GLUE | KW_GLUE2 | KW_UNGLUE | KW_IDC
transExp ::= KW_TRANSPORT atomic atomic { pin=1 }
idJExp ::= KW_IDJ atomic atomic atomic atomic atomic atomic { pin=1 }
projectionExp ::= exp (DOT_ONE | DOT_TWO)
pairExp ::= LPAREN exp pairInner+ RPAREN { pin=3 }
private pairInner ::= COMMA exp { pin=1 }
pConExp ::= nameUsage LAYOUT_START exp LAYOUT_END { pin=2 } // c{T A B} x1 x2 @ phi
typeExp ::= KW_U
holeExp ::= HOLE
parenExp ::= LPAREN exp RPAREN

dim ::= ONE | ZERO { extends=formula }
system ::= LBRACK sides RBRACK { pin=1 }

private sides ::= (side COMMA?)*
side ::= face* ARROW exp { pin=2 }
face ::= LPAREN nameUsage EQ dim RPAREN { pin=1 }

formula ::=
   disj
 | conj
 | neg
 | nameUsage
 | dim
 | parenj
conj ::= formula AND formula { extends=formula }
disj ::= formula OR  formula { extends=formula }
neg ::= MINUS formula { extends=formula }
parenj ::= LPAREN formula RPAREN { extends=formula }

// Branches
private branches ::= (branch LAYOUT_SEP?)*
// TODO: better have ... @ i @ j @ k -> ... ?
branch ::= nameUsage nameDecl* (AT nameUsage*)? ARROW expWhere {
	mixin='org.ice1000.tt.psi.cubicaltt.CubicalTTDeclListMixin'
}
