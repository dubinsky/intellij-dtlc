//noinspection BnfResolveForFile
{
  generate=[java="8" names="long"]

  parserClass="org.ice1000.tt.psi.agda.AgdaParser"

  psiClassPrefix="Agda"
  psiImplClassSuffix="Impl"
  psiPackage="org.ice1000.tt.psi.agda"
  psiImplPackage="org.ice1000.tt.psi.agda.impl"

  elementTypeHolderClass="org.ice1000.tt.psi.agda.AgdaTypes"
  elementTypeClass="org.ice1000.tt.psi.agda.AgdaElementType"
  tokenTypeClass="org.ice1000.tt.psi.agda.AgdaTokenType"

  extends(".*Exp")=exp
  extends(".*Arg")=argPrefix
}

/// This is just a placeholder.
file ::= module | layout
nameDecl ::= IDENTIFIER {
	implements=['com.intellij.psi.PsiNameIdentifierOwner']
	mixin='org.ice1000.tt.psi.agda.AgdaNameDeclMixin'
}

module ::= KW_MODULE nameExp KW_WHERE
 layout {
	pin=1
	extends=declaration
}

dataSignature ::= nameDecl+ argPrefix* COLON exp {
	pin=3
	mixin='org.ice1000.tt.psi.agda.AgdaSignatureMixin'
}
signature ::= (nameDecl+ | UNDERSCORE) COLON exp {
	pin=2
	extends=declaration
	mixin='org.ice1000.tt.psi.agda.AgdaSignatureMixin'
}
implementation ::= lhs eqExp? whereClause? {
	extends=declaration
	mixin='org.ice1000.tt.psi.agda.AgdaImplementationMixin'
}
withAbstraction ::= lhs KW_WITH exp barExp* {
	pin=2
	extends=declaration
}
private unquoteKeywords ::=
   KW_UNQUOTE_DEF
 | KW_UNQUOTE_DECL
unquote ::= unquoteKeywords exp {
	pin=1
	extends=declaration
}
open ::= KW_OPEN exp { extends=declaration }
openModified ::= KW_OPEN atomic importModification* { extends=declaration }
private aliasKeywords ::=
   KW_PATTERN
 | KW_SYNTAX
alias ::= aliasKeywords implementation {
	pin=1
	extends=declaration
}
private infixKeywords ::=
   KW_INFIX
 | KW_INFIXL
 | KW_INFIXR
infix ::= infixKeywords NUMBER nameExp+ {
	pin=1
	extends=declaration
}
importPackage ::= KW_OPEN? KW_IMPORT nameExp importModification* {
	pin=2
	extends=declaration
}
private importModification ::= visibility | renaming
visibilityKeywords ::= KW_USING | KW_HIDING
visibility ::= visibilityKeywords OPEN_PAREN (nameExp nameExpRest*)? CLOSE_PAREN { pin=1 }
private nameExpRest ::= SEMI nameExp { pin=1 }

renaming ::= KW_RENAMING OPEN_PAREN (renamePair renamePairRest*)? CLOSE_PAREN { pin=1 }
renamePair ::= nameExp "to" nameDecl { pin=2 }
private renamePairRest ::= SEMI renamePair { pin=1 }

macro ::= KW_MACRO layout { pin=1 }
whereClause ::= KW_WHERE layout { pin=1 }
whereSignatureClause ::= KW_WHERE layoutSignature? { pin=1 }
whereRecordClause ::= KW_WHERE layoutRecord { pin=1 }

data ::= dataKeyword dataSignature whereSignatureClause? {
	extends=declaration
	mixin='org.ice1000.tt.psi.agda.AgdaDataMixin'
}
dataBody ::= dataKeyword nameDecl+ whereSignatureClause {
	extends=declaration
	mixin='org.ice1000.tt.psi.agda.AgdaDataMixin'
}
private dataKeyword ::= KW_DATA | KW_CODATA

record ::= KW_RECORD dataSignature whereRecordClause {
	pin=1
	extends=declaration
	mixin='org.ice1000.tt.psi.agda.AgdaDataMixin'
}

recordDecl ::=
   recordDeclKeywords
 | recordFields
 | recordConstructor

recordConstructor ::= KW_CONSTRUCTOR IDENTIFIER {
	pin=1
	extends=recordDecl
}

recordDeclKeywords ::=
   KW_ETA_EQUALITY
 | KW_INDUCTIVE
 | KW_COINDUCTIVE
 | KW_NO_ETA_EQUALITY {
	extends=recordDecl
}

recordFields ::= KW_FIELD layoutSignature {
	pin=1
	extends=recordDecl
}

declaration ::=
   signature
 | withAbstraction
 | implementation
 | module
 | block
 | dataBody
 | data
 | record
 | alias
 | openModified
 | open
 | infix
 | importPackage
 | macro
 | unquote

private blockKeyword ::=
   KW_PRIMITIVE
 | KW_PRIVATE
 | KW_VARIABLE
 | KW_POSTULATE
 | KW_ABSTRACT
 | KW_INSTANCE
 | KW_MUTUAL
block ::= blockKeyword layout {
	pin=1
	extends=declaration
}

private lhsStart ::= exp | ELLIPSIS
lhs ::= lhsStart barExp* rewriting? { pin=1 }
rewriting ::= KW_REWRITE exp barExp* { pin=1 }
private barExp ::= BAR exp { pin=1 }

layout ::= indentationLayout | declaration {
	mixin='org.ice1000.tt.psi.agda.AgdaLayoutMixin'
}
private indentationLayout ::=
 LAYOUT_START
  (declaration (LAYOUT_SEP? declaration)*)?
 LAYOUT_END? { pin=1 }

layoutSignature ::= indentationSignatureLayout | blockOrSig {
	mixin='org.ice1000.tt.psi.agda.AgdaLayoutMixin'
}
private indentationSignatureLayout ::=
 LAYOUT_START
  (blockOrSig (LAYOUT_SEP? blockOrSig)*)?
 LAYOUT_END? { pin=1 }
private blockOrSig ::= block | signature

layoutRecord ::= indentationRecordLayout | recordDecl
private indentationRecordLayout ::=
 LAYOUT_START
  (recordDecl (LAYOUT_SEP? recordDecl)*)?
 LAYOUT_END? { pin=1 }

exp ::=
   type2Exp
 | asExp
 | appExp
 | atomic

appExp ::= exp atomic+
private atomic ::=
   string
 | atomicExp
 | nameExp
 | matchExp
 | typeExp
 | lamExp
 | idiomExp
 | recordExp
 | dotExp
 | quoteExp
 | letExp
 | sysExp
 | instanceExp
 | implicitExp
 | doExp
 | parenExp

atomicExp ::=
   QUESTION_MARK
 | HOLE
 | UNIVERSE
 | NUMBER
 | FLOAT
 | OPEN_PAREN CLOSE_PAREN
nameExp ::= IDENTIFIER (DOT IDENTIFIER)* | UNDERSCORE {
	mixin='org.ice1000.tt.psi.agda.AgdaNameExpGeneratedMixin'
}
typeExp ::= argPrefix ARROW? exp
type2Exp ::= exp ARROW exp
asExp ::= exp AS nameExp
lamExp ::= LAMBDA exp lamBody?
matchExp ::= LAMBDA OPEN_BRACE clauses CLOSE_BRACE { pin=2 }
parenExp ::= OPEN_PAREN exp CLOSE_PAREN { pin=2 }
idiomExp ::= OPEN_IDIOM_BRACKET exp CLOSE_IDIOM_BRACKET { pin=1 }
recordExp ::= KW_RECORD OPEN_BRACE projects CLOSE_BRACE { pin=2 }
dotExp ::= DOT exp { pin=1 }
quoteExp ::= quoteKeyword exp { pin=1 }
letExp ::= KW_LET layout KW_IN exp { pin=1 }
doExp ::= KW_DO layout { pin=1 }
implicitExp ::= OPEN_BRACE exp eqExp? CLOSE_BRACE { pin=2 }
sysExp ::= OPEN_PAREN nameExp eqExp CLOSE_PAREN { pin=3 }
private eqExp ::= EQUAL exp { pin=1 }
instanceExp ::= OPEN_BRACE OPEN_BRACE exp eqExp? CLOSE_BRACE CLOSE_BRACE { pin=2 }
string ::= CHR_LIT | STR_LIT {
	mixin='org.ice1000.tt.psi.agda.AgdaStringMixin'
	extends=exp
}

clause ::= exp (ARROW exp)?
private clauses ::= clause restClauses*
private restClauses ::= SEMI clause { pin=1 }

project ::= nameDecl EQUAL exp { pin=2 }
private projects ::= project restProjects*
private restProjects ::= SEMI project { pin=1 }

private lamBody ::= ARROW exp { pin=1 }

argPrefix ::=
   explicitArg
 | implicitArg
 | implicitForallArg
 | instanceArg
 | forallArg
explicitArg ::= KW_FORALL? OPEN_PAREN signature CLOSE_PAREN
implicitArg ::= KW_FORALL? OPEN_BRACE signature CLOSE_BRACE { pin=3 }
implicitForallArg ::= KW_FORALL? OPEN_BRACE nameDecl+ CLOSE_BRACE { pin=3 }
instanceArg ::= OPEN_BRACE OPEN_BRACE signature CLOSE_BRACE CLOSE_BRACE { pin=2 }
forallArg ::= KW_FORALL nameDecl+

private quoteKeyword ::=
   KW_QUOTE
 | KW_QUOTE_TERM
 | KW_QUOTE_GOAL
 | KW_QUOTE_CONTEXT
 | KW_UNQUOTE
 | KW_TACTIC
 | KW_OVERLAP
